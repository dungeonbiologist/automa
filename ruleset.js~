
function mouseMoveRuleset(e){
  var m = mouseOf(e.currentTarget, e);
  //moused over ruleset
  var place = states*clamp(0, Math.floor(m.x/size), states-1) + clamp(0, Math.floor(m.y/size), states-1);
  if(showRule!==place){
    showRule=place;
    for(var j=0; j<sliders.length; j++){
      sliders[j].clearChange();
      sliders[j].showChange(place);
    }
  }
  render();
}
function drawRuleset(context,ruleset){
  for(var i=0; i<states; i++){
    for(var j=0; j<states; j++){
      context.fillStyle = colors[ruleset[i*states+j]];
      context.fillRect(i*size,j*size,size,size);
    }
  } 
}

function mouseOutRuleset(e){
  for(var j=0; j<sliders.length; j++){
    sliders[j].clearChange();
  }
  showRule=undefined;
  render();
}
function mouseDownRuleset(e){
  var m = mouseOf(e.currentTarget, e);
   //over ruleset
  var place = states*Math.floor(m.x/size) + Math.floor(m.y/size);
  if(e.shiftKey){
    sliders[sliders.active].add(place);
  } else {
    var copy = copyArray(ruleset);
    copy[place] = (ruleset[place]+1)%states;
    changeRule(copy);
  }
  render();
}
